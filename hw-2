# Реализовать алгоритм пирамидальной сортировки (сортировка кучей).
# После загрузки задания, вы можете проверить себя самостоятельно с помощью эталонного решения (standard.pdf)

import time
import random


def heapsort(nums):
    build_max_heap(nums)
    for i in range(len(nums) - 1, 0, -1):
        nums[0], nums[i] = nums[i], nums[0]
        max_heapify(nums, index=0, size=i)


def parent(i):
    return (i - 1) // 2


def left(i):
    return 2 * i + 1


def right(i):
    return 2 * i + 2


def build_max_heap(nums):
    length = len(nums)
    start = parent(length - 1)
    while start >= 0:
        max_heapify(nums, index=start, size=length)
        start = start - 1


def max_heapify(nums, index, size):
    l = left(index)
    r = right(index)
    if (l < size and nums[l] > nums[index]):
        largest = l
    else:
        largest = index
    if (r < size and nums[r] > nums[largest]):
        largest = r
    if (largest != index):
        nums[largest], nums[index] = nums[index], nums[largest]
        max_heapify(nums, largest, size)


x = int(input('Введите количество элементов списка: '))
nums = [random.randint(1, x+1) for _ in range(1, x+1)]
print(f'Несортированный список: {nums}')
start_time = time.time()
heapsort(nums)
print('Сортированный список: ', end='')
print(nums)
end_time = time.time()
print(f'Время выполнения сортировки: {(end_time - start_time):.03f} сек.')
